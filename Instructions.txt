Instructions:
In this task, you need to write a simple HTTP Denial-of-Service protection system.
You may use any libraries that will make your code cleaner, or better in any way (we do expect you to implement the core logic yourself)
You can write in any language you prefer

1. Client

  1.1 The user enters the number of HTTP Clients to simulate.
  1.2 For each HTTP client you will run a separate thread/task which will do the following in a loop:
    1.2.1 Send HTTP request to the server with the client identifier as a query parameter (e.g. http://localhost:8080/?clientId=3). Different clients can share the same identifier.
    1.2.2 Wait some random time and then send another request.
    1.2.3 The client will run until <enter> is pressed after which it will gracefully drain all the threads/tasks (wait for all of them to complete) and will exit.

2. Server

  2.1 Starts listening for incoming HTTP requests.
  2.2 For each incoming HTTP request you will do the following:
    2.2.1 Handle the request in a separate thread/task.
    2.2.2 Check if this specific client id reached the max number of requests per time frame threshold (no more than 5 requests per 5 secs).
    2.2.3 If the client hasn’t reached the threshold, it will get a “200 OK” response otherwise “503 Service Unavailable”.
    2.2.4 The time frame starts on each client’s first request and ends 5 seconds later. After the time frame has ended, the client’s first request will open a new time frame and so forth.
  2.3 The server will run until <enter> is pressed after which it will gracefully drain all the threads/tasks and will exit.
  2.4 The server should utilize all available resources (cores)

3. General notes

  3.1 Pay attention to thread safeness and gracefull shutdown.
  3.2 The solution should be as simple as possible. No need for advanced input or configuation mechanisms.
  3.3 The solution should be a clean piece of code. Avoid over design/engineering.
